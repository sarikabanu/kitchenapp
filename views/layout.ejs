<!DOCTYPE html>
<html lang="en">
  <head>
    <title><%=typeof title == 'undefined' ? 'Kitchen Master: Welcome to Smart Kitchen.' : title%></title>

    <meta charset="utf-8">
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, shrink-to-fit=no">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap-datepicker.standalone.min.css">
    <link rel="stylesheet" href="/styles/bootstrap/bootstrap-grid.css">
    <link rel="stylesheet" href="/styles/bootstrap/bootstrap-grid.min.css">
    <link rel="stylesheet" href="/styles/bootstrap/bootstrap-reboot.css">
    <link rel="stylesheet" href="/styles/bootstrap/bootstrap-reboot.min.css">
    <link rel="stylesheet" href="/styles/bootstrap/bootstrap.css">
    <link rel="stylesheet" href="/styles/bootstrap/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <body>

    <header>
      <nav class="navbar navbar-expand-md navbar-dark bg-dark">
        <a class="navbar-brand" href="/">KitchenMASTER</a>

        <div class="collapse navbar-collapse" id="navbarsExampleDefault">
          <ul class="navbar-nav mr-auto">
            <li class="nav-item active">
              <a class="nav-link" href="/"> Interactive Smart Kitchen <span class="sr-only">(current)</span></a>
            </li>
          </ul>
          <ul class="navbar-nav pull-right">
            <li class="nav-item active">
              <span class="nav-link">
                <% if(req.path.indexOf('admin') > 0){ %>
                  Admin Portal
                <% } else if(req.path.indexOf('mobile') > 0){ %>
                  Mobile portal
                <% } else if(req.path.indexOf('menu') > 0){ %>
                  Menu Management
                <% } else if(req.path.indexOf('recipe') > 0){ %>
                  Recipe Management
                <% } else if(req.path.indexOf('inventory') > 0){ %>
                  Inventory Management
                <% } else { %>
                  Home
                <% } %>
              </span>
            </li>
          </ul>
        </div>
      </nav>
    </header>


    <%- body %>

    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/lodash.core.js"></script>
    <script src="/js/a-jquery/jquery-3.2.1.min.js"></script>
    <script src="/js/a-jquery/jquery-ui.js"></script>
    <script src="/js/a-jquery/moment.min.js"></script>
    <script src="/js/bootstrap/bootstrap-datepicker.min.js"></script>
    <script src="/js/bootstrap/bootstrap.bundle.min.js"></script>
    <!--SCRIPTS END-->
  </body>

  <script>
    $.fn.datepicker.defaults.format = "dd M yyyy";
  </script>

</html>
